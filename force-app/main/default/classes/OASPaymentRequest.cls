/*
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.\n\nTo learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).\n\n## Authentication\nTo connect to the Payments API, you must use your basic authentication credentials. For this, create your web service user, as described in [How to get the WS user password](https://docs.adyen.com/user-management/how-to-get-the-web-service-ws-user-password). Then use its credentials to authenticate your request, for example:\n\n```\ncurl\n-U "ws@Company.YourCompany":"YourWsPassword" \\n-H "Content-Type: application/json" \\n...\n```\nNote that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).\n\n## Versioning\nPayments API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://pal-test.adyen.com/pal/servlet/Payment/v64/authorise\n```
 *
 * The version of the OpenAPI document: 64
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASPaymentRequest
 */
 @namespaceAccessible
public class OASPaymentRequest {
    /**
     * Get amount
     * @return amount
     */
    public OASAmount amount { get; set; }

    /**
     * Get applicationInfo
     * @return applicationInfo
     */
    public OASApplicationInfo applicationInfo { get; set; }

    /**
     * Get billingAddress
     * @return billingAddress
     */
    public OASAddress billingAddress { get; set; }

    /**
     * Get browserInfo
     * @return browserInfo
     */
    public OASBrowserInfo browserInfo { get; set; }

    /**
     * Get card
     * @return card
     */
    public OASCard card { get; set; }

    /**
     * Get cardDetails
     * @return cardDetails
     */
    public OASCardDetails cardDetails { get; set; }

    /**
     * Get card
     * @return card
     */
    public PaymentMethodDetails paymentMethod { get; set; }

    /**
     * The shopper\'s date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
     * @return dateOfBirth
     */
    public Datetime dateOfBirth { get; set; }

    /**
     * Get deliveryAddress
     * @return deliveryAddress
     */
    public OASAddress deliveryAddress { get; set; }

    /**
     * A string containing the shopper\'s device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
     * @return deviceFingerprint
     */
    public String deviceFingerprint { get; set; }

    /**
     * The merchant account identifier, with which you want to process the transaction.
     * @return merchantAccount
     */
    public String merchantAccount { get; set; }

    /**
     * The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens ("-").\nMaximum length: 80 characters.
     * @return reference
     */
    public String reference { get; set; }

    /**
     * Some payment methods require defining a value for this field to specify how to process the transaction.\n\nFor the Bancontact payment method, it can be set to:\n* `maestro` (default), to be processed like a Maestro card, or\n* `bcmc`, to be processed like a Bancontact card.
     * @return selectedBrand
     */
    public String selectedBrand { get; set; }

    /**
     * The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
     * @return selectedRecurringDetailReference
     */
    public String selectedRecurringDetailReference { get; set; }

    /**
     * The shopper\'s email address. We recommend that you provide this data, as it is used in velocity fraud checks.\n> For 3D Secure 2 transactions, schemes require the `shopperEmail` for both `deviceChannel` **browser** and **app**.
     * @return shopperEmail
     */
    public String shopperEmail { get; set; }

    /**
     * The shopper\'s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> Required for 3D Secure 2 transactions. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
     * @return shopperIP
     */
    public String shopperIP { get; set; }

    /**
     * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     */
    public enum ShopperInteractionEnum {
        ECOMMERCE,
        CONTAUTH,
        MOTO,
        POS
    }

    /**
     * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     * @return shopperInteraction
     */
    public ShopperInteractionEnum shopperInteraction { get; set; }

    /**
     * The combination of a language code and a country code to specify the language to be used in the payment.
     * @return shopperLocale
     */
    public String shopperLocale { get; set; }

    /**
     * Get shopperName
     * @return shopperName
     */
    public OASName shopperName { get; set; }

    /**
     * The shopper\'s reference to uniquely identify this shopper (e.g. user ID or account ID).\n> This field is required for recurring payments.
     * @return shopperReference
     */
    public String shopperReference { get; set; }

    /**
     * When this is set to **true** and the `shopperReference` is provided, the payment details will be stored.
     * @return storePaymentMethod
     */
    public Boolean storePaymentMethod { get; set; }

    public OASPaymentRequest() {
    }

    public static OASPaymentRequest getExample() {
        OASPaymentRequest paymentRequest = new OASPaymentRequest();
          paymentRequest.amount = OASAmount.getExample();
          paymentRequest.applicationInfo = OASApplicationInfo.getExample();
          paymentRequest.billingAddress = OASAddress.getExample();
          paymentRequest.browserInfo = OASBrowserInfo.getExample();
          paymentRequest.card = OASCard.getExample();
          paymentRequest.cardDetails = OASCardDetails.getExample();
          paymentRequest.deliveryAddress = OASAddress.getExample();
          paymentRequest.deviceFingerprint = '';
          paymentRequest.merchantAccount = '';
          paymentRequest.paymentMethod = OASCardDetails.getExample();
          paymentRequest.reference = '';
          paymentRequest.selectedBrand = '';
          paymentRequest.selectedRecurringDetailReference = '';
          paymentRequest.shopperEmail = '';
          paymentRequest.shopperIP = '';
          paymentRequest.shopperInteraction = ShopperInteractionEnum.ECOMMERCE;
          paymentRequest.shopperLocale = '';
          paymentRequest.shopperName = OASName.getExample();
          paymentRequest.shopperReference = '';
          paymentRequest.storePaymentMethod = false;
        return paymentRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASPaymentRequest) {           
            OASPaymentRequest paymentRequest = (OASPaymentRequest) obj;
            return this.amount == paymentRequest.amount
                && this.applicationInfo == paymentRequest.applicationInfo
                && this.billingAddress == paymentRequest.billingAddress
                && this.browserInfo == paymentRequest.browserInfo
                && this.card == paymentRequest.card
                && this.cardDetails == paymentRequest.cardDetails
                && this.deliveryAddress == paymentRequest.deliveryAddress
                && this.deviceFingerprint == paymentRequest.deviceFingerprint
                && this.merchantAccount == paymentRequest.merchantAccount
                && this.paymentMethod == paymentRequest.paymentMethod
                && this.reference == paymentRequest.reference
                && this.selectedBrand == paymentRequest.selectedBrand
                && this.selectedRecurringDetailReference == paymentRequest.selectedRecurringDetailReference
                && this.shopperEmail == paymentRequest.shopperEmail
                && this.shopperIP == paymentRequest.shopperIP
                && this.shopperInteraction == paymentRequest.shopperInteraction
                && this.shopperLocale == paymentRequest.shopperLocale
                && this.shopperName == paymentRequest.shopperName
                && this.shopperReference == paymentRequest.shopperReference
                && this.storePaymentMethod == paymentRequest.storePaymentMethod;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (amount == null ? 0 : System.hashCode(amount));
        hashCode = (17 * hashCode) + (applicationInfo == null ? 0 : System.hashCode(applicationInfo));
        hashCode = (17 * hashCode) + (billingAddress == null ? 0 : System.hashCode(billingAddress));
        hashCode = (17 * hashCode) + (browserInfo == null ? 0 : System.hashCode(browserInfo));
        hashCode = (17 * hashCode) + (card == null ? 0 : System.hashCode(card));
        hashCode = (17 * hashCode) + (cardDetails == null ? 0 : System.hashCode(cardDetails));
        hashCode = (17 * hashCode) + (deliveryAddress == null ? 0 : System.hashCode(deliveryAddress));
        hashCode = (17 * hashCode) + (deviceFingerprint == null ? 0 : System.hashCode(deviceFingerprint));
        hashCode = (17 * hashCode) + (merchantAccount == null ? 0 : System.hashCode(merchantAccount));
        hashCode = (17 * hashCode) + (reference == null ? 0 : System.hashCode(reference));
        hashCode = (17 * hashCode) + (paymentMethod == null ? 0 : System.hashCode(paymentMethod));
        hashCode = (17 * hashCode) + (selectedBrand == null ? 0 : System.hashCode(selectedBrand));
        hashCode = (17 * hashCode) + (selectedRecurringDetailReference == null ? 0 : System.hashCode(selectedRecurringDetailReference));
        hashCode = (17 * hashCode) + (shopperEmail == null ? 0 : System.hashCode(shopperEmail));
        hashCode = (17 * hashCode) + (shopperIP == null ? 0 : System.hashCode(shopperIP));
        hashCode = (17 * hashCode) + (shopperInteraction == null ? 0 : System.hashCode(shopperInteraction));
        hashCode = (17 * hashCode) + (shopperLocale == null ? 0 : System.hashCode(shopperLocale));
        hashCode = (17 * hashCode) + (shopperName == null ? 0 : System.hashCode(shopperName));
        hashCode = (17 * hashCode) + (shopperReference == null ? 0 : System.hashCode(shopperReference));
        hashCode = (17 * hashCode) + (storePaymentMethod == null ? 0 : System.hashCode(storePaymentMethod));
        return hashCode;
    }
}

