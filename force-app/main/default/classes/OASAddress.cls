/*
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.\n\nTo learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).\n\n## Authentication\nTo connect to the Payments API, you must use your basic authentication credentials. For this, create your web service user, as described in [How to get the WS user password](https://docs.adyen.com/user-management/how-to-get-the-web-service-ws-user-password). Then use its credentials to authenticate your request, for example:\n\n```\ncurl\n-U "ws@Company.YourCompany":"YourWsPassword" \\n-H "Content-Type: application/json" \\n...\n```\nNote that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).\n\n## Versioning\nPayments API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.\n\nFor example:\n```\nhttps://pal-test.adyen.com/pal/servlet/Payment/v64/authorise\n```
 *
 * The version of the OpenAPI document: 64
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASAddress
 */
public class OASAddress {
    /**
     * The name of the city.
     * @return city
     */
    public String city { get; set; }

    /**
     * The two-character country code as defined in ISO-3166-1 alpha-2. For example, **US**.\n> If you don\'t know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
     * @return country
     */
    public String country { get; set; }

    /**
     * The number or name of the house.
     * @return houseNumberOrName
     */
    public String houseNumberOrName { get; set; }

    /**
     * A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.
     * @return postalCode
     */
    public String postalCode { get; set; }

    /**
     * State or province codes as defined in ISO 3166-2. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.
     * @return stateOrProvince
     */
    public String stateOrProvince { get; set; }

    /**
     * The name of the street.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
     * @return street
     */
    public String street { get; set; }

    public static OASAddress getExample() {
        OASAddress address = new OASAddress();
          address.city = '';
          address.country = '';
          address.houseNumberOrName = '';
          address.postalCode = '';
          address.stateOrProvince = '';
          address.street = '';
        return address;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASAddress) {           
            OASAddress address = (OASAddress) obj;
            return this.city == address.city
                && this.country == address.country
                && this.houseNumberOrName == address.houseNumberOrName
                && this.postalCode == address.postalCode
                && this.stateOrProvince == address.stateOrProvince
                && this.street == address.street;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (city == null ? 0 : System.hashCode(city));
        hashCode = (17 * hashCode) + (country == null ? 0 : System.hashCode(country));
        hashCode = (17 * hashCode) + (houseNumberOrName == null ? 0 : System.hashCode(houseNumberOrName));
        hashCode = (17 * hashCode) + (postalCode == null ? 0 : System.hashCode(postalCode));
        hashCode = (17 * hashCode) + (stateOrProvince == null ? 0 : System.hashCode(stateOrProvince));
        hashCode = (17 * hashCode) + (street == null ? 0 : System.hashCode(street));
        return hashCode;
    }
}

